"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const faces = ["(・`ω´・)", ";;w;;", "owo", "UwU", ">w<", "^w^", "(* ^ ω ^)", "(⌒ω⌒)", "ヽ(*・ω・)ﾉ", "(o´∀`o)", "(o･ω･o)", "＼(＾▽＾)／"];
exports.Map_O_To_OwO = (input) => input.replace(/o/g, () => Math.round(Math.random()) ? "owo" : "o");
exports.Map_Ew_To_UwU = (input) => input.replace(/ew/g, "uwu");
exports.Map_Hey_To_Hay = (input) => input.replace(/([Hh])ey/g, "$1ay");
exports.Map_Dead_To_Ded = (input) => input.replace(/Dead/g, "Ded").replace(/dead/g, "ded");
exports.Map_N_Vowel_T_To_Nd = (input) => input.replace(/n[aeiou]*t/g, "nd");
exports.Map_Brackets_To_StarTrails = (input) => input.replace(/[({<]/g, "｡･:*:･ﾟ★,｡･:*:･ﾟ☆").replace(/[)}>]/g, "☆ﾟ･:*:･｡,★ﾟ･:*:･｡");
exports.Map_PeriodCommaExclamationSemicolon_To_Kaomojis = (input) => input.replace(/[.,](?![0-9])/g, () => (" " + faces[Math.floor(Math.random() * faces.length)])).replace(/[!;]+/g, () => (" " + faces[Math.floor(Math.random() * faces.length)]));
exports.Map_That_To_Dat = (input) => input.replace(/that/g, "dat").replace(/That/g, "Dat");
exports.Map_Th_To_F = (input) => input.replace(/[Tt]h(?![Ee])/g, "f").replace(/TH(?!E)/g, "F");
exports.Map_Le_To_Wal = (input) => input.replace(/le$/g, 'wal');
exports.Map_Ve_To_We = (input) => input.replace(/ve/g, 'we').replace(/Ve/g, 'We');
exports.Map_Ry_To_Wwy = (input) => input.replace(/ry/g, 'wwy');
exports.Map_ROrL_To_W = (input) => input.replace(/(?:r|l)/g, "w").replace(/(?:R|L)/g, "W");
exports.Map_Ll_To_Ww = (input) => input.replace(/ll/g, "ww");
exports.Map_VowelOrRExceptO_L_To_Wl = (input) => input.replace(/[aeiur]l$/g, "wl").replace(/[AEIUR]([lL])$/g, "W$1");
exports.Map_Old_To_Owld = (input) => input.replace(/([Oo])ld/g, '$1wld').replace(/OLD/g, 'OWLD');
exports.Map_Ol_To_Owl = (input) => input.replace(/([Oo])l/g, "$1wl").replace(/OL/g, "OWL");
exports.Map_LOrR_O_To_Wo = (input) => input.replace(/[lr]o/g, "wo").replace(/[LR]([oO])/g, "W$1");
exports.Map_SpecificConsonants_O_To_Letter_And_Wo = (input) => input.replace(/([bcdfghjkmnpqstxyz])o/g, "$1wo").replace(/([BCDFGHJKMNPQSTXYZ])([oO])/g, (_, m1, m2) => m1 + (m2.toUpperCase() === m2 ? "W" : "w") + m2);
exports.Map_VOrW_Le_To_Wal = (input) => input.replace(/[vw]le/g, "wal");
exports.Map_Fi_To_Fwi = (input) => input.replace(/([Ff])i/g, "$1wi").replace(/FI/g, "FWI");
exports.Map_Ver_To_Wer = (input) => input.replace(/([Vv])er/g, "wer");
exports.Map_Poi_To_Pwoi = (input) => input.replace(/([Pp])oi/g, "$1woi");
exports.Map_SpecificConsonants_Le_To_Letter_And_Wal = (input) => input.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le/g, "$1wal");
exports.Map_Fuc_To_Fwuc = (input) => input.replace(/([Ff])uc/g, "$1wuc");
exports.Map_Mom_To_Mwom = (input) => input.replace(/([Mm])om/g, "$1wom");
exports.Map_Me_To_Mwe = (input) => input.replace(/([Mm])e/g, "$1we");
exports.Map_NVowel_To_Ny = (input) => input.replace(/n([aeiou])/g, 'ny$1').replace(/N([aeiou])/g, 'Ny$1').replace(/N([AEIOU])/g, 'NY$1');
exports.Map_Ove_To_Uv = (input) => input.replace(/ove/g, "uv").replace(/OVE/g, "UV");
exports.Map_Haha_To_HehexD = (input) => input.replace(/\b(ha|hah|heh|hehe)+\b/g, 'hehe xD');
exports.Map_The_To_Teh = (input) => input.replace(/\b([Tt])he\b/g, "$1eh");
